name: Publish Package

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (beta, latest, next)'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - latest
          - next

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Get release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from tag (remove 'v' prefix if present, handle both 1.x.x and v1.x.x)
            VERSION=$(echo "${{ github.event.release.tag_name }}" | sed 's/^v//')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Release version: $VERSION"
          fi

      - name: Update package version
        if: github.event_name == 'release'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current package.json version: $CURRENT_VERSION"
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version "$VERSION" --no-git-tag-version
            echo "Updated package.json to version $VERSION"
          else
            echo "Package.json already at version $VERSION — skipping npm version"
          fi

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Build package
        run: npm run build

      - name: Verify package contents
        run: npm pack --dry-run

      - name: Publish to npm (release)
        if: github.event_name == 'release'
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (manual)
        if: github.event_name == 'workflow_dispatch'
        run: npm publish --tag ${{ github.event.inputs.tag }} --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get package version for manual release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag == 'latest'
        id: manual_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      # NOTE: Release creation via the workflow has been removed.
      # Release creation can be performed manually from the Releases UI or via the GitHub CLI as needed.

      - name: Publish Success Notification
        if: success()
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "✅ Successfully published @altus4/sdk@${{ steps.version.outputs.version }} to npm"
          else
            echo "✅ Successfully published @altus4/sdk with tag ${{ github.event.inputs.tag }} to npm"
          fi
